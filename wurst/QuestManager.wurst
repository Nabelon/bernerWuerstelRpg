package QuestManager
import public Assets
import ClosureEvents
import HashMap
import LinkedList
import GlobalObjects

public class QuestManager
    static HashMap<int,LinkedList<Quest>> killUnitQuests
    static HashMap<int,LinkedList<Quest>> talkToUnitQuests
    static HashMap<int,LinkedList<Quest>> pickupItemQuests

    static function initiate() 
        killUnitQuests = new HashMap<int, LinkedList<Quest>>()
        talkToUnitQuests = new HashMap<int, LinkedList<Quest>>()
        pickupItemQuests = new HashMap<int, LinkedList<Quest>>()
        EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
            let i = GetManipulatedItem()
            let u = GetTriggerUnit()
            let quests = pickupItemQuests.get(i.getTypeId())
            let qTmp = tryCreateQuest(i.getTypeId(),u.getOwner())
            if quests != null
                for q in quests
                    if(q!=qTmp) 
                        q.itemPickUp(i,u.getOwner())


        EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
            let u = GetTriggerUnit()
            let k = GetKillingUnitBJ()
            let quests = killUnitQuests.get(u.getTypeId())
            if quests != null
                for q in quests
                    q.unitKilled(u,k)
            
        EventListener.add(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER) ->
            let talker = GetTriggerUnit()
            let target = GetOrderTargetUnit()
            let quests = talkToUnitQuests.get(target.getTypeId())
            if quests != null
                for q in quests
                    q.unitTalkTo(target, talker)


        
    static function addQuestToKillUnitQuests(Quest q, int uId)
        if not killUnitQuests.has(uId)
            killUnitQuests.put(uId,new LinkedList<Quest>()..push(q))
        else
            killUnitQuests.get(uId).push(q)

            
    static function addQuestToTalkToUnitQuests(Quest q, int uId)
        if not talkToUnitQuests.has(uId)
            talkToUnitQuests.put(uId,new LinkedList<Quest>()..push(q))
        else
            talkToUnitQuests.get(uId).push(q)
   
    static function addQuestToPickupItemQuests(Quest q, int uId)
        if not talkToUnitQuests.has(uId)
            pickupItemQuests.put(uId,new LinkedList<Quest>()..push(q))
        else
            pickupItemQuests.get(uId).push(q)
    
    static function tryCreateQuest(int iId, player p) returns Quest
        switch iId
            case 'I006' 
                return new KillUnits('n001',15,'n008',iId,"Kill Bandits",0,25,1000,200)..initiate(p)
            case 'I01I' 
                return new KillUnits('n009',10,'n008',iId,"Kill Paladins",0,40,1500,0)..initiate(p)
            case 'I01J' 
                return new KillUnits('n00F',20,'n008',iId,"Kill Gouls",20,50,3000,2000)..initiate(p)
            case 'I01K' 
                return new KillUnits('n00M',25,'n008',iId,"Kill Vampires",30,65,5000,3000)..initiate(p)
            case 'I01L' 
                return new KillUnits('n00N',25,'n008',iId,"Kill Faries",40,90,7000,5000)..initiate(p)
            case 'I005' 
                return new KillUnits('n00Z',30,'n008',iId,"Kill Wendigos",50,120,10000,0)..initiate(p)
        return null
public abstract class Quest
    abstract function initiate(player p)
    abstract function unitKilled(unit u, unit killer)
    abstract function itemPickUp(item i, player p)
    abstract function unitTalkTo(unit target, unit talker)
    function printQuestUpdate(string s, vec2 v, real radius)
        for pId in GlobalObjects.playerIDs
            if(v.inRange(GlobalObjects.playerObjects.get(pId).uHero.getPos(), radius))
                printTimedToPlayer(s, 5, players[pId])

public class KillUnits extends Quest
    int unitTypeId
    int killsNeeded        
    int killCount
    int questCompleterTypeID
    int questCompleterItemID
    int minLevel
    int maxLevel
    int expReward
    int goldReward
    string questObjective
    construct(int unitTypeId, int killsNeeded, int questCompleterTypeID, int questCompleterItemID, string questObjective,
                int minLevel, int maxLevel, int expReward, int goldReward)
        this.unitTypeId = unitTypeId
        this.killsNeeded = killsNeeded
        this.questCompleterTypeID  = questCompleterTypeID
        this.questCompleterItemID = questCompleterItemID
        killCount = 0
        this.questObjective = questObjective
        this.minLevel = minLevel
        this.maxLevel = maxLevel
        this.expReward = expReward
        this.goldReward = goldReward
    override function initiate(player p)
        if not QuestManager.killUnitQuests.get(unitTypeId) == null
            for q in QuestManager.killUnitQuests.get(unitTypeId)
                if q instanceof KillUnits
                    return
        let hLevel = GlobalObjects.playerObjects.get(p.getId()).uHero.getLevel()
        if(hLevel > maxLevel or hLevel < minLevel)
            printTimedToPlayer("Not in level range: " + minLevel.toString() + "-" + maxLevel.toString(), 10, p)
            return
        killCount = 0
        printQuestUpdate("Quest Started: " + questObjective, GlobalObjects.playerObjects.get(p.getId()).uHero.getPos(),10)
        QuestManager.addQuestToKillUnitQuests(this, unitTypeId)
        QuestManager.addQuestToTalkToUnitQuests(this, questCompleterTypeID)
        QuestManager.addQuestToPickupItemQuests(this, questCompleterItemID)

    override function unitKilled(unit u, unit killer)
        
        let hLevel = GlobalObjects.playerObjects.get(killer.getOwner().getId()).uHero.getLevel()
        if(hLevel+10 > maxLevel or hLevel < minLevel-5)
            return
        killCount++
        if(killCount <= killsNeeded)
            printQuestUpdate(questObjective + " : " + killCount.toString() + "/" +  killsNeeded.toString() , u.getPos(), 2000)
    override function unitTalkTo(unit target, unit talker)
        if not target.getPos().inRange(talker.getPos(), 500.0)
            return
        if(killCount >= killsNeeded)
        
            printTimed("Quest Completed: " + questObjective,10)
            for pId in GlobalObjects.playerIDs
                GlobalObjects.playerObjects.get(pId).uHero.addXp(1000, true)
            QuestManager.killUnitQuests.get(unitTypeId).remove(this)
            QuestManager.talkToUnitQuests.get(questCompleterTypeID).remove(this)
            QuestManager.pickupItemQuests.get(questCompleterItemID).remove(this)
    override function itemPickUp(item i, player p)
        if(killsNeeded >= killCount)
            printTimedToPlayer("Quest already started! Progress: " +killCount.toString() + "/" +  killsNeeded.toString(), 10.0, p)
        else
            printTimed("Quest Completed: " + questObjective,10)
            for pId in GlobalObjects.playerIDs
                let hero = GlobalObjects.playerObjects.get(pId).uHero
                if(hero.getLevel() >= minLevel)
                    hero.addXp(expReward, true)
                    hero.getOwner().addGold(goldReward)
            QuestManager.killUnitQuests.get(unitTypeId).remove(this)
            QuestManager.talkToUnitQuests.get(questCompleterTypeID).remove(this)
            QuestManager.pickupItemQuests.get(questCompleterItemID).remove(this)
